/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and a public-read, owner-write model for properties.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Access is restricted to the owning user.
 * - /properties/{propertyId}: Stores property information. Readable by everyone, but only the landlord who created it can modify/delete.
 * - /properties/{propertyId}/viewingRequests/{viewingRequestId}: Viewing requests are stored as subcollections of properties. Only the associated landlord can manage these.
 * - /rentalApplications/{rentalApplicationId}: Stores rental applications.
 * - /leases/{leaseId}: Stores lease agreements.
 * - /payments/{paymentId}: Stores payment information.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Properties are publicly readable but only the landlord can modify or delete them.
 * - Viewing requests can only be created by any signed-in user, and can only be managed by the landlord of the respective property.
 * - Listing of user documents is disallowed for privacy reasons.
 *
 * Denormalization for Authorization:
 * - Properties documents MUST contain a `landlordId` field to identify the owner. This is essential for secure write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.  Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (read, write) User with ID 'userId' can read/write their own profile.
     * @deny (read, write) User with ID 'otherUserId' cannot read/write user profile 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Users can only read their own profile
      allow get: if isOwner(userId);
      allow list: if false;

      // Users can create their own profile, but the ID must match their auth UID
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Users can update their own profile, and the ID field cannot be changed
      allow update: if isExistingOwner(userId);

      // Users can delete their own profile
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to property documents. Properties are publicly readable, but only the landlord who created them can modify or delete them.
     * @path /properties/{propertyId}
     * @allow (read) Any user can read any property.
     * @allow (create) Landlord can create a property with their landlordId.
     * @allow (update, delete) Landlord can update/delete their own property.
     * @deny (create) Landlord cannot create a property with a different landlordId.
     * @deny (update, delete) Other users cannot update/delete the property.
     * @principle Allows public read access while restricting write access to the owner.
     */
    match /properties/{propertyId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(landlordId) {
        return request.auth.uid == landlordId;
      }

      function isExistingOwner(landlordId) {
        return isOwner(landlordId) && exists(resource);
      }

      // Anyone can read property information
      allow get, list: if true;

      // Landlords can create properties, but the landlordId in the document must match their UID
      allow create: if isSignedIn() && request.resource.data.landlordId == request.auth.uid;

      // Landlords can update their own properties, if they exist
      allow update: if isSignedIn() && isOwner(resource.data.landlordId);

      // Landlords can delete their own properties, if they exist
      allow delete: if isSignedIn() && isOwner(resource.data.landlordId);
    }

    /**
     * @description Controls access to viewing requests, which are stored as subcollections of properties. Landlords can manage viewing requests for their properties.
     * @path /properties/{propertyId}/viewingRequests/{viewingRequestId}
     * @allow (create) Any signed-in user can request a viewing.
     * @allow (read, update, delete) Landlord can manage requests for their properties.
     * @deny (read, update, delete) Other users cannot read, update, or delete viewing requests.
     * @principle Restricts management of viewing requests to the landlord of the respective property.
     */
    match /properties/{propertyId}/viewingRequests/{viewingRequestId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function getLandlordId(propertyId) {
        return get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId
      }

      function isLandlord(propertyId) {
        return request.auth.uid == getLandlordId(propertyId);
      }

      function isExistingLandlord(propertyId) {
        return isLandlord(propertyId) && exists(resource);
      }

      // Anyone can create a viewing request if signed in
      allow create: if isSignedIn();

      // Only the landlord of the property can read, update, and delete viewing requests
      allow get: if isSignedIn() && isLandlord(propertyId);
      allow list: if isSignedIn() && isLandlord(propertyId);
      allow update: if isSignedIn() && isLandlord(propertyId);
      allow delete: if isSignedIn() && isLandlord(propertyId);
    }

     /**
      * @description Controls access to rental applications.
      * @path /rentalApplications/{rentalApplicationId}
      * @allow create: if isSignedIn();
      * @allow get, list: if false;
      * @allow update: if false;
      * @allow delete: if false;
      * @principle For now, restrict access.
      */
    match /rentalApplications/{rentalApplicationId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow create: if isSignedIn();
        allow get: if false;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Controls access to leases.
     * @path /leases/{leaseId}
     * @allow create: if false;
     * @allow get, list: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle For now, restrict access.
     */
    match /leases/{leaseId} {
        allow create: if false;
        allow get: if false;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Controls access to payments.
     * @path /payments/{paymentId}
     * @allow create: if false;
     * @allow get, list: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle For now, restrict access.
     */
    match /payments/{paymentId} {
        allow create: if false;
        allow get: if false;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}