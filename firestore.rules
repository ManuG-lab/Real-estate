/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and property management.
 * Landlords own properties and manage associated viewing requests. Tenants can submit rental applications.
 * Lease and payment data are accessible with appropriate authorization.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /properties/{propertyId}: Stores property information, with owner-only write access and public read access.
 * - /properties/{propertyId}/viewingRequests/{viewingRequestId}: Stores viewing requests, managed by the property owner.
 * - /rentalApplications/{rentalApplicationId}: Stores rental applications, accessible with proper authorization.
 * - /leases/{leaseId}: Stores lease agreements, accessible with proper authorization.
 * - /payments/{paymentId}: Stores payment records, accessible with proper authorization.
 *
 * @keySecurityDecisions
 * - Users can only access their own profile data.
 * - Properties are publicly readable, but only the owner (landlord) can modify them.
 * - Listing of users is disallowed.
 * - Viewing requests are managed by the property owner (landlord).
 * - Rental Applications are accessible with proper authorization
 * - Leases are accessible with proper authorization
 * - Payments are accessible with proper authorization
 *
 * @denormalizationForAuthorization
 * - Property documents denormalize the landlordId to simplify ownership checks.
 * - ViewingRequest documents denormalize both propertyId and landlordId for efficient access control.
 *
 * @structuralSegregation
 * - Private user data is stored under /users/{userId}, separate from public property listings in /properties/{propertyId}.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile if authenticated as 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their own profile if authenticated as 'user123'.
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete the profile of 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && (request.resource.data.id == resource.data.id);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to property documents.
     * @path /properties/{propertyId}
     * @allow (get, list) - Any user can read property details and list all properties.
     * @allow (create) - A landlord can create a property if the landlordId in the document matches their user ID.
     * @allow (update, delete) - Only the landlord who owns the property can update or delete it.
     * @deny (create) - A user cannot create a property with a landlordId that doesn't match their own user ID.
     * @deny (update, delete) - A user cannot update or delete a property they don't own.
     * @principle Allows public read access with owner-only write access for properties.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && (request.resource.data.landlordId == request.auth.uid);
      allow update: if isSignedIn() && isOwner(resource.data.landlordId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.landlordId);
    }

    /**
     * @description Controls access to viewing request documents within a property.
     * @path /properties/{propertyId}/viewingRequests/{viewingRequestId}
     * @allow (create) - Any signed in user can create a viewing request for a property.
     * @allow (get, list, update, delete) - Only the landlord who owns the property can manage viewing requests.
     * @deny (create) - An unauthenticated user cannot create a viewing request.
     * @deny (get, list, update, delete) - A user who is not the landlord cannot access or manage viewing requests for a property.
     * @principle Enforces landlord-only management of viewing requests for their properties.
     */
    match /properties/{propertyId}/viewingRequests/{viewingRequestId} {
        allow create: if isSignedIn();
        allow get, list: if isSignedIn() && isOwner(getProperty(propertyId).data.landlordId);
        allow update: if isSignedIn() && isOwner(getProperty(propertyId).data.landlordId) && resource != null;
        allow delete: if isSignedIn() && isExistingOwner(getProperty(propertyId).data.landlordId);
    }

    /**
     * @description Controls access to rental application documents.
     * @path /rentalApplications/{rentalApplicationId}
     * @allow (create) - Any signed in user can create a rental application.
     * @allow (get, list) - Any signed in user can list rental applications.
     * @allow (update) - Only the tenant who created the application can update it.
     * @allow (delete) - Only the tenant who created the application can delete it.
     * @deny (create) - An unauthenticated user cannot create a rental application.
     * @deny (get, list, update, delete) - A user who is not the tenant cannot access or manage rental applications.
     * @principle Enforces tenant-only management of rental applications.
     */
    match /rentalApplications/{rentalApplicationId} {
        allow create: if isSignedIn();
        allow get, list: if isSignedIn();
        allow update: if isSignedIn() && isOwner(resource.data.tenantId) && resource != null;
        allow delete: if isSignedIn() && isExistingOwner(resource.data.tenantId);
    }

    /**
     * @description Controls access to lease documents.
     * @path /leases/{leaseId}
     * @allow (create) - Only a landlord can create a lease.
     * @allow (get, list) - Landlord or Tenant can get or list leases which they are a part of.
     * @allow (update) - Only the landlord who owns the lease can update it.
     * @allow (delete) - Only the landlord who owns the lease can delete it.
     * @deny (create) - An unauthenticated user cannot create a lease.
     * @deny (get, list, update, delete) - A user who is not the landlord cannot access or manage leases.
     * @principle Enforces landlord-only management of leases.
     */
    match /leases/{leaseId} {
        allow create: if isSignedIn() && (request.resource.data.landlordId == request.auth.uid);
        allow get, list: if isSignedIn() && (isOwner(resource.data.landlordId) || isOwner(resource.data.tenantId));
        allow update: if isSignedIn() && isOwner(resource.data.landlordId) && resource != null;
        allow delete: if isSignedIn() && isExistingOwner(resource.data.landlordId);
    }

     /**
      * @description Controls access to payment documents.
      * @path /payments/{paymentId}
      * @allow (create) - Only a tenant can create a payment record related to their lease.
      * @allow (get, list) - Landlord or Tenant can get or list payments which they are a part of.
      * @allow (update) - Only the tenant who created the payment record can update it.
      * @allow (delete) - Only the tenant who created the payment record can delete it.
      * @deny (create) - An unauthenticated user cannot create a payment record.
      * @deny (get, list, update, delete) - A user who is not the tenant cannot access or manage payment records.
      * @principle Enforces tenant-only management of payment records.
      */
    match /payments/{paymentId} {
        allow create: if isSignedIn() && isTenantOfLease(request.resource.data.leaseId, request.auth.uid);
        allow get, list: if isSignedIn() && (isLandlordOfLease(getLease(resource.data.leaseId).data.landlordId) || isTenantOfLease(resource.data.leaseId, request.auth.uid));
        allow update: if isSignedIn() && isTenantOfLease(resource.data.leaseId, request.auth.uid) && resource != null;
        allow delete: if isSignedIn() && isExistingTenantOfLease(resource.data.leaseId, request.auth.uid);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function getProperty(propertyId) {
      return get(/databases/$(database)/documents/properties/$(propertyId));
    }

    function getLease(leaseId) {
      return get(/databases/$(database)/documents/leases/$(leaseId));
    }

    function isTenantOfLease(leaseId, tenantId) {
        return getLease(leaseId).data.tenantId == tenantId;
    }

    function isLandlordOfLease(landlordId) {
        return landlordId == request.auth.uid;
    }

    function isExistingTenantOfLease(leaseId, tenantId) {
      return isTenantOfLease(leaseId, tenantId) && resource != null;
    }
  }
}