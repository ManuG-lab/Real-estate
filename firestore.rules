/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a mixed security model with user-based access control and public read access for some collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owner.
 * - /properties/{propertyId}: Stores property information, publicly readable.
 * - /properties/{propertyId}/viewingRequests/{viewingRequestId}: Stores viewing requests, only accessible to landlord and tenant.
 * - /rentalApplications/{rentalApplicationId}: Stores rental applications, accessible only to landlord and tenant.
 * - /leases/{leaseId}: Stores lease agreements, publicly readable
 * - /payments/{paymentId}: Stores payment information, accessible only to landlord and tenant.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Properties are publicly readable but only authorized users can create, update, or delete them.
 * - Listing of users is disallowed.
 * - Landlords and tenants can access viewing requests, rental applications and payments
 *
 * Denormalization for Authorization:
 * - ViewingRequests and RentalApplications store both propertyId and landlordId to simplify access control.
 * - Properties have a landlordId field to identify the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read/write their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/write the profile at /users/user123.
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure properties. Properties are publicly readable, but only landlords can create/update/delete them.
     * @path /properties/{propertyId}
     * @allow (get, list) - Any user can read any property.
     * @allow (create) - Landlord with UID 'landlord123' can create a property with landlordId 'landlord123'.
     * @allow (update, delete) - Landlord with UID 'landlord123' can update/delete a property where property.landlordId == 'landlord123'.
     * @deny (create) - Tenant with UID 'tenant456' cannot create a property.
     * @deny (update, delete) - Tenant with UID 'tenant456' cannot update/delete a property, even if they know the propertyId.
     * @principle Allows public reads with owner-only writes, enforcing ownership via the 'landlordId' field.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.landlordId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.landlordId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.landlordId);
    }

    /**
     * @description Secure viewing requests. Only the landlord of the property or the user who created the request can read/write.
     * @path /properties/{propertyId}/viewingRequests/{viewingRequestId}
     * @allow (create) - Any signed-in user can create a viewing request under a property.
     * @allow (get, list) - Landlord can read/list viewing requests under their property.
     * @allow (update, delete) - Only the landlord can update/delete viewing requests.
     * @deny (get, list) - Regular user (not the landlord) cannot read/list viewing requests.
     * @principle Enforces shared access based on landlordId and propertyId.
     */
    match /properties/{propertyId}/viewingRequests/{viewingRequestId} {
      allow get, list: if isSignedIn() && get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId == request.auth.uid;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId == request.auth.uid;
    }

    /**
     * @description Secure rental applications. Only the landlord and tenant involved can read/write.
     * @path /rentalApplications/{rentalApplicationId}
     * @allow (create) - Any signed-in user can create a rental application
     * @allow (get, list) - Landlord or tenant associated to the application can read it.
     * @allow (update, delete) - Only the landlord can update/delete rental applications.
     * @deny (get, list) - Unauthorized user cannot read/list rental applications.
     * @principle Enforces shared access based on landlordId and tenantId.
     */
    match /rentalApplications/{rentalApplicationId} {
      allow get, list: if isSignedIn() && (resource.data.tenantId == request.auth.uid || get(/databases/$(database)/documents/properties/$(resource.data.propertyId)).data.landlordId == request.auth.uid);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && get(/databases/$(database)/documents/properties/$(resource.data.propertyId)).data.landlordId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/properties/$(resource.data.propertyId)).data.landlordId == request.auth.uid;
    }

    /**
     * @description Secure leases.
     * @path /leases/{leaseId}
     * @allow (get, list) - Any user can read any lease.
     * @allow (create) - Landlord can create a lease.
     * @allow (update, delete) - Only the landlord can update/delete a lease.
     * @deny (create) - Unauthorized user cannot create a lease.
     * @deny (update, delete) - Unauthorized user cannot update/delete a lease.
     */
    match /leases/{leaseId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.landlordId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.landlordId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.landlordId);
    }

    /**
     * @description Secure payments. Only the landlord and tenant involved can read/write.
     * @path /payments/{paymentId}
     * @allow (create) - Any signed-in user can create a payment
     * @allow (get, list) - Landlord or tenant associated to the payment can read it.
     * @allow (update, delete) - Only the landlord can update/delete payments.
     * @deny (get, list) - Unauthorized user cannot read/list payments.
     * @principle Enforces shared access based on landlordId and tenantId.
     */
    match /payments/{paymentId} {
      allow get, list: if isSignedIn() && (get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data.tenantId == request.auth.uid || get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data.landlordId == request.auth.uid);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data.landlordId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data.landlordId == request.auth.uid;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}