/**
 * @fileoverview Firestore Security Rules for the Rental Management Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on user identity and role.
 * It enforces strict ownership for user profiles and related data, while allowing
 * public read access to properties. Writes are generally restricted to authorized
 * users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the
 *   authenticated user.
 * - /properties/{propertyId}: Stores property details, publicly readable but
 *   writable only by authorized landlords.
 * - /properties/{propertyId}/viewingRequests/{viewingRequestId}: Viewing requests
 *   associated with a property, writable only by authorized users.
 * - /rentalApplications/{rentalApplicationId}: Stores rental applications,
 *   accessible to authorized tenants.
 * - /leases/{leaseId}: Stores lease agreements, accessible to landlords and tenants
 *   involved in the lease.
 * - /payments/{paymentId}: Stores payment information, accessible to landlords and
 *   tenants involved in the lease.
 *
 * Key Security Decisions:
 * - Listing of /users is explicitly denied to protect user privacy.
 * - Data consistency is enforced by validating the user ID in user-specific paths
 *   against the authenticated user's ID.
 *
 * Denormalization for Authorization:
 * - The rules rely on the `landlordId` and `tenantId` properties present in
 *   properties, applications, and leases to determine ownership and access rights.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict ownership for user profiles. Users can only read and write their own profile data. Listing of all users is disallowed.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (create) User with ID 'user123' can create their profile.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user123' } } }
     * @allow (update) User with ID 'user123' can update their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (delete) User with ID 'user123' can delete their profile.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (get) User with ID 'user456' cannot read user 'user123's profile.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     *   Request: { auth: { uid: 'user456' }, resource: { data: { id: 'user123' } } }
     * @deny (list) Listing of all users is disallowed.
     *   Request: N/A
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to properties, but restricts write access to authorized users (landlords).
     * @path /properties/{propertyId}
     * @allow (get) Any user can read a property.
     *   Request: { auth: null }
     * @allow (list) Any user can list properties.
     *   Request: { auth: null }
     * @allow (create) Landlord with ID 'landlord123' can create a property with landlordId 'landlord123'.
     *   Request: { auth: { uid: 'landlord123' }, resource: { data: { landlordId: 'landlord123' } } }
     * @allow (update) Landlord with ID 'landlord123' can update a property with landlordId 'landlord123'.
     *   Request: { auth: { uid: 'landlord123' }, resource: { data: { landlordId: 'landlord123' } } }
     * @allow (delete) Landlord with ID 'landlord123' can delete a property with landlordId 'landlord123'.
     *   Request: { auth: { uid: 'landlord123' } }
     * @deny (create) User with ID 'tenant456' cannot create a property.
     *   Request: { auth: { uid: 'tenant456' }, resource: { data: { landlordId: 'landlord123' } } }
     * @deny (update) User with ID 'tenant456' cannot update a property.
     *   Request: { auth: { uid: 'tenant456' }, resource: { data: { landlordId: 'landlord123' } } }
     * @principle Public read with owner-only writes, enforces document ownership for writes.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.landlordId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.landlordId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.landlordId == request.auth.uid && resource != null;
    }

    /**
     * @description Restricts access to viewing requests to authorized users (landlords).
     * @path /properties/{propertyId}/viewingRequests/{viewingRequestId}
     * @allow (get) Landlord with ID 'landlord123' can read a viewing request for their property.
     *   Request: { auth: { uid: 'landlord123' } }
     * @allow (list) Landlord with ID 'landlord123' can list viewing requests for their property.
     *   Request: { auth: { uid: 'landlord123' } }
     * @allow (create) Any signed in user can create a viewing request if landlordId matches the property's landlordId.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { landlordId: 'landlord123' } } }
     * @allow (update) Landlord with ID 'landlord123' can update a viewing request for their property.
     *   Request: { auth: { uid: 'landlord123' }, resource: { data: { landlordId: 'landlord123' } } }
     * @allow (delete) Landlord with ID 'landlord123' can delete a viewing request for their property.
     *   Request: { auth: { uid: 'landlord123' } }
     * @deny (get) User with ID 'tenant456' cannot read a viewing request for another landlord's property.
     *   Request: { auth: { uid: 'tenant456' } }
     * @principle Enforces document ownership for writes.
     */
    match /properties/{propertyId}/viewingRequests/{viewingRequestId} {
      allow get, list: if isSignedIn() && get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.landlordId == get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId == request.auth.uid && resource != null;
    }

    /**
     * @description Restricts access to rental applications to authorized tenants.
     * @path /rentalApplications/{rentalApplicationId}
     * @allow (get) Tenant with ID 'tenant456' can read their rental application.
     *   Request: { auth: { uid: 'tenant456' } }
     * @allow (list) Tenant with ID 'tenant456' can list their rental applications.
     *   Request: { auth: { uid: 'tenant456' } }
     * @allow (create) Tenant with ID 'tenant456' can create a rental application with tenantId 'tenant456'.
     *   Request: { auth: { uid: 'tenant456' }, resource: { data: { tenantId: 'tenant456' } } }
     * @allow (update) Tenant with ID 'tenant456' can update their rental application.
     *   Request: { auth: { uid: 'tenant456' } }
     * @allow (delete) Tenant with ID 'tenant456' can delete their rental application.
     *   Request: { auth: { uid: 'tenant456' } }
     * @deny (get) User with ID 'landlord123' cannot read a rental application for another tenant.
     *   Request: { auth: { uid: 'landlord123' } }
     * @principle Enforces document ownership for writes.
     */
    match /rentalApplications/{rentalApplicationId} {
      allow get, list: if isSignedIn() && request.auth.uid == resource.data.tenantId;
      allow create: if isSignedIn() && request.resource.data.tenantId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == resource.data.tenantId && resource != null;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.tenantId && resource != null;
    }

    /**
     * @description Restricts access to lease agreements to landlords and tenants involved in the lease.
     * @path /leases/{leaseId}
     * @allow (get) Landlord with ID 'landlord123' can read a lease agreement where they are the landlord.
     *   Request: { auth: { uid: 'landlord123' } }
     * @allow (list) Landlord with ID 'landlord123' can list lease agreements where they are the landlord.
     *   Request: { auth: { uid: 'landlord123' } }
     * @allow (get) Tenant with ID 'tenant456' can read a lease agreement where they are the tenant.
     *   Request: { auth: { uid: 'tenant456' } }
     * @allow (list) Tenant with ID 'tenant456' can list lease agreements where they are the tenant.
     *   Request: { auth: { uid: 'tenant456' } }
     * @allow (create) Landlord with ID 'landlord123' can create a lease agreement with landlordId 'landlord123'.
     *   Request: { auth: { uid: 'landlord123' }, resource: { data: { landlordId: 'landlord123' } } }
     * @allow (update) Landlord with ID 'landlord123' can update a lease agreement where they are the landlord.
     *   Request: { auth: { uid: 'landlord123' } }
     * @allow (delete) Landlord with ID 'landlord123' can delete a lease agreement where they are the landlord.
     *   Request: { auth: { uid: 'landlord123' } }
     * @deny (get) User with ID 'user789' cannot read a lease agreement where they are not involved.
     *   Request: { auth: { uid: 'user789' } }
     * @principle Enforces document ownership for writes.
     */
    match /leases/{leaseId} {
      allow get, list: if isSignedIn() && (resource.data.landlordId == request.auth.uid || resource.data.tenantId == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.landlordId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.landlordId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.landlordId == request.auth.uid && resource != null;
    }

    /**
     * @description Restricts access to payment information to landlords and tenants involved in the associated lease.
     * @path /payments/{paymentId}
     * @allow (get) Landlord with ID 'landlord123' can read payment information for a lease they manage.
     *   Request: { auth: { uid: 'landlord123' } }
     * @allow (list) Landlord with ID 'landlord123' can list payment information for a lease they manage.
     *   Request: { auth: { uid: 'landlord123' } }
     * @allow (get) Tenant with ID 'tenant456' can read payment information for their lease.
     *   Request: { auth: { uid: 'tenant456' } }
     * @allow (list) Tenant with ID 'tenant456' can list payment information for their lease.
     *   Request: { auth: { uid: 'tenant456' } }
     * @allow (create) Landlord or tenant associated with the payment can create it (e.g., when recording a payment).
     *   Request: { auth: { uid: 'user123' }, resource: { data: { leaseId: 'lease123' } } }
     * @allow (update) Landlord or tenant associated with the payment can update it.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (delete) Landlord or tenant associated with the payment can delete it.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (get) User with ID 'user789' cannot read payment information for a lease they are not involved in.
     *   Request: { auth: { uid: 'user789' } }
     * @principle Enforces document ownership for writes.
     */
    match /payments/{paymentId} {
      allow get, list: if isSignedIn() && (get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data.landlordId == request.auth.uid || get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data.tenantId == request.auth.uid);
      allow create: if isSignedIn() && (get(/databases/$(database)/documents/leases/$(request.resource.data.leaseId)).data.landlordId == request.auth.uid || get(/databases/$(database)/documents/leases/$(request.resource.data.leaseId)).data.tenantId == request.auth.uid);
      allow update: if isSignedIn() && (get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data.landlordId == request.auth.uid || get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data.tenantId == request.auth.uid) && resource != null;
      allow delete: if isSignedIn() && (get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data.landlordId == request.auth.uid || get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data.tenantId == request.auth.uid) && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}