/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and a public-read, owner-write model for properties and related data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /properties/{propertyId}: Stores property data, publicly readable but writable only by the landlord who owns the property.
 * - /properties/{propertyId}/viewingRequests/{viewingRequestId}: Stores viewing requests for a property, writable only by the landlord who owns the property.
 * - /rentalApplications/{rentalApplicationId}: Stores rental applications, publicly readable but writable only by the applicant who applied for the property.
 * - /leases/{leaseId}: Stores lease agreements, publicly readable, but writable only by the landlord that owns the lease.
 * - /payments/{paymentId}: Stores payment data, publicly readable, but writable only by the landlord that owns the lease.
 *
 * Key Security Decisions:
 * - No global user listing is allowed. User profiles must be fetched by ID.
 * - Properties and related collections are publicly readable to maximize discoverability, but all write operations are restricted to the owner (landlord).
 * - Relational integrity is enforced on create operations to ensure that documents are created with the correct ownership links.
 * - Ownership is validated on update and delete operations to prevent unauthorized modifications.
 *
 * Denormalization for Authorization:
 * - The 'landlordId' field is used in the Property and ViewingRequest entities to enforce ownership.
 * - The 'tenantId' field is used in the RentalApplication entity to enforce ownership.
 * - The 'landlordId' and 'tenantId' field is used in the Lease entity to enforce ownership.
 * - The 'leaseId' field is used in the Payment entity to enforce ownership.
 *
 * Structural Segregation:
 * - There is no structural segregation in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profiles. Each user can only access their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching user ID.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own profile.
     * @deny (create, update, delete) - Any user tries to modify another user's profile.
     * @deny (list) - No global user listing allowed.
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Requires the user to be signed in
      allow get: if isSignedIn() && isOwner(userId);
      // Requires the user to be signed in
      allow list: if false; // No global user listing

      // Allow the user to create their own profile, with validation
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Requires the user to be the owner and the resource to exist
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Enforce immutability
      // Requires the user to be the owner and the resource to exist
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to property information. Properties are publicly readable, but only the landlord can modify them.
     * @path /properties/{propertyId}
     * @allow (get, list) - Any user can view property information.
     * @allow (create, update, delete) - Only the landlord who owns the property can create, update, or delete it.
     * @deny (create, update, delete) - Any user tries to modify a property they don't own.
     * @principle Enforces owner-only writes for property data while allowing public reads.
     */
    match /properties/{propertyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      function isOwner(landlordId) {
        return request.auth.uid == landlordId;
      }

      function isExistingOwner(landlordId) {
        return isOwner(landlordId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(request.resource.data.landlordId);
      allow update: if isExistingOwner(resource.data.landlordId);
      allow delete: if isExistingOwner(resource.data.landlordId);
    }

    /**
     * @description Manages access to viewing requests for a property. Only the landlord who owns the property can manage these requests.
     * @path /properties/{propertyId}/viewingRequests/{viewingRequestId}
     * @allow (get, list) - Any user can view viewing requests for a property.
     * @allow (create, update, delete) - Only the landlord who owns the property can create, update, or delete viewing requests.
     * @deny (create, update, delete) - Any user tries to modify a viewing request for a property they don't own.
     * @principle Enforces owner-only writes for viewing requests while allowing public reads.
     */
    match /properties/{propertyId}/viewingRequests/{viewingRequestId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      function isOwner(landlordId) {
        return request.auth.uid == landlordId;
      }

      function isExistingOwner(landlordId) {
        return isOwner(landlordId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(request.resource.data.landlordId);
      allow update: if isExistingOwner(resource.data.landlordId);
      allow delete: if isExistingOwner(resource.data.landlordId);
    }

    /**
     * @description Manages access to rental applications. Only the tenant can submit and update/delete their own application.
     * @path /rentalApplications/{rentalApplicationId}
     * @allow (get, list) - Any user can read any rental applications
     * @allow (create, update, delete) - Only the tenant who created the application can modify it.
     * @deny (create, update, delete) - Any user tries to modify an application they didn't create.
     * @principle Enforces owner-only writes for rental applications while allowing public reads.
     */
    match /rentalApplications/{rentalApplicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      function isOwner(tenantId) {
        return request.auth.uid == tenantId;
      }

      function isExistingOwner(tenantId) {
        return isOwner(tenantId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(request.resource.data.tenantId);
      allow update: if isExistingOwner(resource.data.tenantId);
      allow delete: if isExistingOwner(resource.data.tenantId);
    }

    /**
     * @description Manages access to lease agreements. Only the landlord can create and update/delete leases.
     * @path /leases/{leaseId}
     * @allow (get, list) - Any user can read any lease agreement.
     * @allow (create, update, delete) - Only the landlord who created the lease can modify it.
     * @deny (create, update, delete) - Any user tries to modify a lease they didn't create.
     * @principle Enforces owner-only writes for leases while allowing public reads.
     */
    match /leases/{leaseId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      function isOwner(landlordId) {
        return request.auth.uid == landlordId;
      }

      function isExistingOwner(landlordId) {
        return isOwner(landlordId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(request.resource.data.landlordId);
      allow update: if isExistingOwner(resource.data.landlordId);
      allow delete: if isExistingOwner(resource.data.landlordId);
    }

    /**
     * @description Manages access to payment records. Only the landlord can create and update/delete payments.
     * @path /payments/{paymentId}
     * @allow (get, list) - Any user can read any payment record.
     * @allow (create, update, delete) - Only the landlord who manages the lease associated with the payment can modify it.
     * @deny (create, update, delete) - Any user tries to modify a payment they didn't create.
     * @principle Enforces owner-only writes for payments while allowing public reads.
     */
    match /payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      function isLeaseOwner(leaseId) {
        return get(/databases/$(database)/documents/leases/$(leaseId)).data.landlordId == request.auth.uid;
      }

      function isExistingLeaseOwner(leaseId) {
        return isLeaseOwner(leaseId) && resource != null;
      }

      allow create: if isSignedIn() && isLeaseOwner(request.resource.data.leaseId);
      allow update: if isExistingLeaseOwner(resource.data.leaseId);
      allow delete: if isExistingLeaseOwner(resource.data.leaseId);
    }
  }
}