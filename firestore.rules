rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   - Auth: { uid: 'user123' }
     *   - Request Data: { id: 'user123', name: 'John Doe', role: 'tenant' }
     * @deny (update) User 'user456' cannot update user profile 'user123'.
     *   - Auth: { uid: 'user456' }
     *   - Request Data: { id: 'user123', name: 'Jane Doe' }
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to property listings. Publicly readable, but only landlords can create, update, or delete.
     * @path /properties/{propertyId}
     * @allow (get) Any user can view a property listing.
     * @allow (list) Any user can list property listings.
     * @allow (create) Landlord 'landlord123' can create a property.
     *   - Auth: { uid: 'landlord123' }
     *   - Request Data: { landlordId: 'landlord123', name: 'Cozy Apartment', price: 1200 }
     * @deny (update) Tenant cannot update a property.
     *   - Auth: { uid: 'tenant456' }
     *   - Request Data: { landlordId: 'landlord123', name: 'Luxury Villa' }
     * @principle Allows public read access with owner-only writes, enforcing landlord ownership.
     */
    match /properties/{propertyId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.landlordId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.landlordId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.landlordId == request.auth.uid;
    }

    /**
     * @description Controls access to viewing requests for a specific property. Landlords manage requests for their properties.
     * @path /properties/{propertyId}/viewingRequests/{viewingRequestId}
     * @allow (create) Any signed-in user can create a viewing request.
     * @allow (get) Landlord can get a viewing request for their property.
     * @allow (update) Landlord can update a viewing request for their property.
     * @allow (delete) Landlord can delete a viewing request for their property.
     * @deny (update) Tenant cannot update a viewing request for someone else's property.
     * @principle Enforces landlord ownership for managing viewing requests.
     */
    match /properties/{propertyId}/viewingRequests/{viewingRequestId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isLandlordOfProperty() {
          return get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId == request.auth.uid;
        }
        allow get, list: if isSignedIn() && isLandlordOfProperty();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isLandlordOfProperty();
        allow delete: if isSignedIn() && isLandlordOfProperty();
    }

    /**
     * @description Controls access to rental applications. Tenants can create applications, and landlords can manage them.
     * @path /rentalApplications/{rentalApplicationId}
     * @allow (create) Tenant can create a rental application.
     * @allow (get) Landlord can get a rental application related to their property.
     * @allow (update) Landlord can update a rental application related to their property.
     * @allow (delete) Landlord can delete a rental application related to their property.
     * @deny (update) Tenant cannot update a rental application for someone else's property.
     * @principle Enforces tenant creation and landlord management of rental applications.
     */
    match /rentalApplications/{rentalApplicationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isLandlordOfProperty(propertyId) {
          return get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId == request.auth.uid;
      }
      allow get: if isSignedIn() && isLandlordOfProperty(request.resource.data.propertyId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isLandlordOfProperty(request.resource.data.propertyId);
      allow delete: if isSignedIn() && isLandlordOfProperty(request.resource.data.propertyId);
    }

    /**
     * @description Controls access to lease agreements. Landlords and tenants involved in the lease can access it.
     * @path /leases/{leaseId}
     * @allow (get) Landlord or Tenant involved in the lease can get it.
     * @allow (update) Landlord or Tenant involved in the lease can update it.
     * @allow (delete) Landlord or Tenant involved in the lease can delete it.
     * @deny (update) Unauthorized user cannot update a lease they are not part of.
     * @principle Restricts access to lease agreements to involved parties (landlord and tenant).
     */
    match /leases/{leaseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isParticipant(landlordId, tenantId) {
        return request.auth.uid == landlordId || request.auth.uid == tenantId;
      }
      allow get, list: if isSignedIn() && isParticipant(resource.data.landlordId, resource.data.tenantId);
      allow create: if false;
      allow update: if isSignedIn() && isParticipant(request.resource.data.landlordId, request.resource.data.tenantId);
      allow delete: if isSignedIn() && isParticipant(resource.data.landlordId, resource.data.tenantId);
    }

    /**
     * @description Controls access to payment information. Landlords and tenants involved in the lease can access it.
     * @path /payments/{paymentId}
     * @allow (get) Landlord or Tenant involved in the lease can get payment details.
     * @allow (create) Landlord or Tenant involved in the lease can create a payment
     * @allow (update) Landlord or Tenant involved in the lease can update payment details.
     * @allow (delete) Landlord or Tenant involved in the lease can delete payment details.
     * @deny (update) Unauthorized user cannot update a payment they are not part of.
     * @principle Restricts access to payment information to involved parties (landlord and tenant).
     */
    match /payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isParticipant(leaseId) {
        return exists(/databases/$(database)/documents/leases/$(leaseId)) && (get(/databases/$(database)/documents/leases/$(leaseId)).data.landlordId == request.auth.uid
            || get(/databases/$(database)/documents/leases/$(leaseId)).data.tenantId == request.auth.uid);
      }
      allow get: if isSignedIn() && isParticipant(resource.data.leaseId);
      allow list: if false;
      allow create: if isSignedIn() && isParticipant(request.resource.data.leaseId);
      allow update: if isSignedIn() && isParticipant(request.resource.data.leaseId);
      allow delete: if isSignedIn() && isParticipant(resource.data.leaseId);
    }
  }
}