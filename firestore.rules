
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isLandlord() {
      return isAuth() && getUserData(request.auth.uid).role == 'landlord';
    }
    
    function isTenant() {
      return isAuth() && getUserData(request.auth.uid).role == 'tenant';
    }

    // anyone can create a user on signup, users can only read/update their own data
    match /users/{userId} {
      allow read, update: if isUser(userId);
      allow create: if isAuth();
    }
    
    // Properties are public, but only a landlord can manage their own properties.
    match /properties/{propertyId} {
      allow read: if true;
      allow create: if isLandlord() && request.resource.data.landlordId == request.auth.uid;
      allow update: if isLandlord() && get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId == request.auth.uid;
    }

    // A tenant can request to view a property. A landlord can see all requests for their properties.
    match /viewingRequests/{requestId} {
      allow create: if isTenant();
      allow read: if isUser(resource.data.tenantId) || (isLandlord() && resource.data.landlordId == request.auth.uid);
      allow update: if isLandlord() && resource.data.landlordId == request.auth.uid;
    }

    // Tenants can create applications. Landlords can view/update applications for their properties.
    match /rentalApplications/{applicationId} {
      allow create: if isTenant() && request.resource.data.tenantId == request.auth.uid;
      allow read, update: if isUser(resource.data.tenantId) || (isLandlord() && get(/databases/$(database)/documents/properties/$(resource.data.propertyId)).data.landlordId == request.auth.uid);
    }

    // Leases can be read by the tenant or the landlord of the property.
    match /leases/{leaseId} {
      allow read: if isUser(resource.data.tenantId) || isUser(resource.data.landlordId);
      allow create: if isLandlord() && request.resource.data.landlordId == request.auth.uid;
    }

    // Payments can be read by the tenant or the landlord associated with the lease.
    match /payments/{paymentId} {
      allow read: if isAuth() && (
        isUser(get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data.tenantId) ||
        isUser(get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data.landlordId)
      );
      allow create: if isAuth(); // Can be created by tenant (payment) or landlord (logging offline payment)
    }
  }
}
