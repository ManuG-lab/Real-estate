/**
 * @fileoverview Firestore Security Rules for the Rent Manager Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on user roles and resource ownership,
 * while remaining flexible on data shapes during the prototyping phase.
 * It enforces a strict user-ownership model for user profiles and uses a combination of
 * ownership and role-based access control for other resources.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Each user can only access their own profile.
 * - /properties/{propertyId}: Stores property information. Open read, but write is restricted to Landlords.
 * - /properties/{propertyId}/viewingRequests/{viewingRequestId}: Stores viewing requests for a specific property. Only Landlords can manage viewing requests for their own properties.
 * - /rentalApplications/{rentalApplicationId}: Stores rental applications.  Anyone should be able to create and read rental applications.
 * - /leases/{leaseId}: Stores lease agreements.
 * - /payments/{paymentId}: Stores payment information.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Data type validation is relaxed to facilitate rapid prototyping, but authorization checks are strictly enforced.
 * - Authorization relies heavily on the `request.auth.uid` to ensure only authenticated users can access protected resources.
 *
 * Denormalization for Authorization:
 * - Properties store the `landlordId` directly, enabling rules to quickly check if a user is the owner of a property.
 * - ViewingRequests store `landlordId` and `propertyId` to allow for granular access control based on property ownership.
 *
 * Structural Segregation:
 * - Drafts vs. published content is not explicitly handled in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can access and modify their own profile.
     * @deny (create) If the user tries to create a profile with an ID that doesn't match their auth UID.
     * @deny (get, update, delete) If the user tries to access or modify someone else's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allow landlord to view their tenants' profiles
      function isLandlordOfTenant() {
        // Assumes user profile has a landlordId field
        return resource.data.landlordId == request.auth.uid;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow user to view their own profile OR landlord to view their tenant's profile
      allow get: if isOwner(userId) || isLandlordOfTenant();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to property information.
     * @path /properties/{propertyId}
     * @allow (get, list) Anyone can read property information.
     * @allow (create) Only landlords can create properties, with landlordId matching their UID.
     * @allow (update, delete) Only the landlord who owns the property can modify or delete it.
     * @deny (create, update, delete) If the user is not a landlord or doesn't own the property.
     * @principle Enforces owner-only writes for properties.
     */
    match /properties/{propertyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(landlordId) {
        return request.auth.uid == landlordId;
      }

      function isExistingOwner(landlordId) {
        return isOwner(landlordId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.landlordId);
      allow update: if isExistingOwner(resource.data.landlordId);
      allow delete: if isExistingOwner(resource.data.landlordId);
    }

    /**
     * @description Controls access to viewing requests for a property.
     * @path /properties/{propertyId}/viewingRequests/{viewingRequestId}
     * @allow (create) Any signed in user can create a viewing request.
     * @allow (get, list) Landlord of the property can read viewing requests.
     * @allow (update, delete) Only the landlord who owns the property can modify or delete viewing requests.
     * @deny (create, update, delete) If the user is not the landlord of the property.
     * @principle Enforces landlord-only management of viewing requests for their properties.
     */
    match /properties/{propertyId}/viewingRequests/{viewingRequestId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isPropertyOwner(landlordId) {
        return request.auth.uid == landlordId;
      }

        function isExistingPropertyOwner(landlordId) {
            return isPropertyOwner(landlordId) && resource != null;
        }

      allow get, list: if isSignedIn() && isPropertyOwner(resource.data.landlordId);
      allow create: if isSignedIn();
      allow update: if isExistingPropertyOwner(resource.data.landlordId);
      allow delete: if isExistingPropertyOwner(resource.data.landlordId);
    }

    /**
     * @description Controls access to rental applications.
     * @path /rentalApplications/{rentalApplicationId}
     * @allow (get, list, create) Any signed in user can submit and read RentalApplications.
     * @allow (update, delete) No one can update or delete an application.
     * @principle Allows anyone to apply for rentals, but prevents modification or deletion.
     */
    match /rentalApplications/{rentalApplicationId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list, create: if isSignedIn();
        allow update, delete: if false;
    }

    /**
     * @description Controls access to lease agreements.
     * @path /leases/{leaseId}
     * @allow (get, list) Anyone can read leases.
     * @allow (create) Only landlords can create leases.
     * @allow (update, delete) Only the landlord who owns the lease can modify or delete it.
     */
    match /leases/{leaseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(landlordId) {
        return request.auth.uid == landlordId;
      }

      function isExistingOwner(landlordId) {
          return isOwner(landlordId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.landlordId);
      allow update: if isExistingOwner(resource.data.landlordId);
      allow delete: if isExistingOwner(resource.data.landlordId);
    }

    /**
     * @description Controls access to payment information.
     * @path /payments/{paymentId}
     * @allow (get, list) Anyone can read payments.
     * @allow (create) Only landlords can create payments.
     * @allow (update, delete) Only the landlord who owns the payment can modify or delete it.
     */
    match /payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(landlordId) {
        return request.auth.uid == landlordId;
      }

      function isExistingOwner(landlordId) {
          return isOwner(landlordId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.landlordId);
      allow update: if isExistingOwner(resource.data.landlordId);
      allow delete: if isExistingOwner(resource.data.landlordId);
    }
  }
}