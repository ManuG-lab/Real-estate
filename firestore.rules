rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuth() {
      return request.auth != null;
    }

    // --- Collections ---

    // PUBLIC: Anyone can read property listings.
    // SECURE: Only the owner (landlord) can write to their property.
    match /properties/{propertyId} {
      allow read: if true;
      allow write: if isAuth() && request.resource.data.landlordId == request.auth.uid;
    }

    // AUTHENTICATED READ: Any authenticated user can read user profiles.
    // This is needed to display user info (e.g., landlord name on property page).
    // SECURE WRITE: Users can only write to their own document.
    match /users/{userId} {
      allow read: if isAuth();
      allow write: if isAuth() && request.auth.uid == userId;
    }

    // SECURE QUERY & READ:
    // - Tenants can query/read their OWN applications.
    // - Landlords can query/read applications for THEIR properties.
    match /rentalApplications/{applicationId} {
      allow read: if (isAuth() && resource.data.tenantId == request.auth.uid) ||
                     (isAuth() && get(/databases/$(database)/documents/properties/$(resource.data.propertyId)).data.landlordId == request.auth.uid);
      allow list: if (isAuth() && request.query.get('where')[0][2] == request.auth.uid); // Ensures tenants can only query their own
      allow create: if isAuth() && request.resource.data.tenantId == request.auth.uid;
    }

    // SECURE QUERY & READ:
    // - A user can query/read leases where they are the tenant OR the landlord.
    match /leases/{leaseId} {
       allow read: if isAuth() && (resource.data.landlordId == request.auth.uid || resource.data.tenantId == request.auth.uid);
       allow list: if isAuth() && (request.query.get('where')[0][2] == request.auth.uid);
       allow write: if isAuth() && request.resource.data.landlordId == request.auth.uid;
    }

    // SECURE QUERY & READ:
    // - Landlords can list payments associated with their properties.
    // - Tenants can list payments for leases they are a part of.
     match /payments/{paymentId} {
      function isUserInLease() {
        let lease = get(/databases/$(database)/documents/leases/$(resource.data.leaseId)).data;
        return request.auth.uid == lease.tenantId || request.auth.uid == lease.landlordId;
      }
      allow read: if isAuth() && isUserInLease();
      allow list: if isAuth() && (request.query.get('where')[0][2] in get(/databases/$(database)/documents/leases?where=["landlordId", "==", request.auth.uid]).docs.map(d => d.id) || request.query.get('where')[0][2] in get(/databases/$(database)/documents/leases?where=["tenantId", "==", request.auth.uid]).docs.map(d => d.id));
      allow create: if isAuth(); // Allow tenants to create payments.
    }

    // --- Subcollections ---

    // SECURE: Only landlords can read/write viewing requests for their own properties.
    // SECURE: Any authenticated user can create a viewing request.
    match /properties/{propertyId}/viewingRequests/{viewingRequestId} {
      allow create: if isAuth();
      allow read, write: if isAuth() && get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId == request.auth.uid;
    }
  }
}
