/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and a public-read, owner-write model for properties.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Access is restricted to the owning user.
 * - /properties/{propertyId}: Stores property information. Readable by all, but only the landlord who owns the property can modify it.
 * - /properties/{propertyId}/viewingRequests/{viewingRequestId}: Viewing requests associated with a property, only the landlord can manage it.
 * - /rentalApplications/{rentalApplicationId}: Stores rental applications.
 * - /leases/{leaseId}: Stores lease agreements.
 * - /payments/{paymentId}: Stores rent payments.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Properties are publicly readable, but only the landlord who created the property can modify it.
 * - Listing of users is disallowed.
 * - Viewing requests are managed only by landlords for their properties.
 * - Rental applications, leases, and payments have minimal access control for now and should be secured based on business logic.
 *
 * Denormalization for Authorization:
 * - Property documents contain a `landlordId` field, enabling direct ownership checks without additional reads.
 * - ViewingRequest documents also contain a `landlordId` field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Authenticated user attempts to create a profile for another user.
     * @deny (get, update, delete) - Authenticated user attempts to access another user's profile.
     * @deny (list) - Listing of users is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to property documents.  Properties are publicly readable, but only the owner can modify them.
     * @path /properties/{propertyId}
     * @allow (get, list) - Any user can read property information.
     * @allow (create) - Authenticated user creates a new property, and their auth UID matches the landlordId in the document.
     * @allow (update, delete) - Authenticated user updates/deletes a property they own.
     * @deny (create) - Authenticated user attempts to create a property with a mismatched landlordId.
     * @deny (update, delete) - Authenticated user attempts to modify a property they do not own.
     * @principle Public read, owner-only writes, enforces document ownership for writes.
     */
    match /properties/{propertyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(landlordId) {
        return request.auth.uid == landlordId;
      }

      function isExistingOwner(landlordId) {
        return isOwner(landlordId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.landlordId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.landlordId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.landlordId == request.auth.uid;
    }

    /**
     * @description Controls access to viewing requests.  Only the landlord of the associated property can manage viewing requests.
     * @path /properties/{propertyId}/viewingRequests/{viewingRequestId}
     * @allow (create) - Any signed in user can create a viewing request for a property, so long as the landlordId matches the parent property's landlordId.
     * @allow (get, list, update, delete) - Only the landlord can manage viewing requests for their properties.
     * @deny (create) - The landlord id on the viewing request does not match the landlord of the property.
     * @principle Landlord manages viewing requests for their properties.
     */
    match /properties/{propertyId}/viewingRequests/{viewingRequestId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isLandlord(propertyId) {
        return get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId == request.auth.uid;
      }

       function viewingRequestLandlordMatchesPropertyLandlord(propertyId) {
        return request.resource.data.landlordId == get(/databases/$(database)/documents/properties/$(propertyId)).data.landlordId;
      }


      allow create: if isSignedIn() && viewingRequestLandlordMatchesPropertyLandlord(propertyId);
      allow get, list, update, delete: if isSignedIn() && isLandlord(propertyId);
    }

      /**
       * @description Controls access to rental applications. Basic protection only, further restrictions may be necessary based on app logic.
       * @path /rentalApplications/{rentalApplicationId}
       * @allow create, get, list, update, delete: if false; // TODO: Implement appropriate access control for rental applications.
       * @principle Placeholder for rental application security.
       */
    match /rentalApplications/{rentalApplicationId} {
      allow create, get, list, update, delete: if false; // TODO: Implement appropriate access control for rental applications.
    }

    /**
     * @description Controls access to leases. Basic protection only, further restrictions may be necessary based on app logic.
     * @path /leases/{leaseId}
     * @allow create, get, list, update, delete: if false; // TODO: Implement appropriate access control for leases.
     * @principle Placeholder for lease security.
     */
    match /leases/{leaseId} {
      allow create, get, list, update, delete: if false; // TODO: Implement appropriate access control for leases.
    }

    /**
     * @description Controls access to payments. Basic protection only, further restrictions may be necessary based on app logic.
     * @path /payments/{paymentId}
     * @allow create, get, list, update, delete: if false; // TODO: Implement appropriate access control for payments.
     * @principle Placeholder for payment security.
     */
    match /payments/{paymentId} {
      allow create, get, list, update, delete: if false; // TODO: Implement appropriate access control for payments.
    }
  }
}